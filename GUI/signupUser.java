package joption;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author My PC
 */
public class signupUser extends javax.swing.JFrame {
    private Connection con;

    /**
     * Creates new form signupUser
     */
    public signupUser() {
        initComponents();
        setSize(800, 640);
        setLocationRelativeTo(null);
        
        ImageIcon icon = new ImageIcon("C:\\Users\\Administrator\\Documents\\NetBeansProjects\\BookBorrowingSystem\\src\\resources\\Images\\JLibraryLogo.png");
setIconImage(icon.getImage());
    }
    
    public void Connect() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/joption","root","");
            
        } catch(ClassNotFoundException ex) {
            Logger.getLogger(signupUser.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(signupUser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        signUpUserPanel = new javax.swing.JPanel();
        kindlyFillInLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        eMailLabel = new javax.swing.JLabel();
        eMailField = new javax.swing.JTextField();
        usernameLabel = new javax.swing.JLabel();
        usernameField = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        passwordCheckBox = new javax.swing.JCheckBox();
        confirmPasswordLabel = new javax.swing.JLabel();
        confirmPasswordField = new javax.swing.JPasswordField();
        confirmPasswordCheckBox = new javax.swing.JCheckBox();
        backLoginUserButton = new javax.swing.JButton();
        alreadyAUserLabel = new javax.swing.JLabel();
        signupBtn = new javax.swing.JButton();
        signUpUserIcon = new javax.swing.JLabel();
        warningLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("SIGN UP USER");
        setPreferredSize(new java.awt.Dimension(800, 600));

        signUpUserPanel.setBackground(new java.awt.Color(111, 79, 55));
        signUpUserPanel.setPreferredSize(new java.awt.Dimension(800, 600));
        signUpUserPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        kindlyFillInLabel.setFont(new java.awt.Font("Bahnschrift", 0, 18)); // NOI18N
        kindlyFillInLabel.setForeground(new java.awt.Color(255, 255, 255));
        kindlyFillInLabel.setText("*Kindly fill in the necessary information.");
        signUpUserPanel.add(kindlyFillInLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(53, 41, -1, -1));

        nameLabel.setFont(new java.awt.Font("Bahnschrift", 1, 24)); // NOI18N
        nameLabel.setForeground(new java.awt.Color(255, 255, 255));
        nameLabel.setText("Name:");
        signUpUserPanel.add(nameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 110, 90, -1));

        nameField.setFont(new java.awt.Font("Bahnschrift", 1, 20)); // NOI18N
        signUpUserPanel.add(nameField, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 100, 490, 44));

        eMailLabel.setFont(new java.awt.Font("Bahnschrift", 1, 24)); // NOI18N
        eMailLabel.setForeground(new java.awt.Color(255, 255, 255));
        eMailLabel.setText("E-Mail:");
        signUpUserPanel.add(eMailLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 170, 100, -1));

        eMailField.setFont(new java.awt.Font("Bahnschrift", 1, 20)); // NOI18N
        signUpUserPanel.add(eMailField, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 160, 490, 44));

        usernameLabel.setFont(new java.awt.Font("Bahnschrift", 1, 24)); // NOI18N
        usernameLabel.setForeground(new java.awt.Color(255, 255, 255));
        usernameLabel.setText("Username:");
        signUpUserPanel.add(usernameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 230, 140, -1));

        usernameField.setFont(new java.awt.Font("Bahnschrift", 1, 20)); // NOI18N
        signUpUserPanel.add(usernameField, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 220, 490, 44));

        passwordLabel.setFont(new java.awt.Font("Bahnschrift", 1, 24)); // NOI18N
        passwordLabel.setForeground(new java.awt.Color(255, 255, 255));
        passwordLabel.setText("Password:");
        signUpUserPanel.add(passwordLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 290, 130, -1));

        passwordField.setFont(new java.awt.Font("Bahnschrift", 1, 20)); // NOI18N
        passwordField.setPreferredSize(new java.awt.Dimension(64, 29));
        signUpUserPanel.add(passwordField, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 280, 490, 44));

        passwordCheckBox.setBackground(new java.awt.Color(111, 79, 55));
        passwordCheckBox.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        passwordCheckBox.setForeground(new java.awt.Color(255, 255, 255));
        passwordCheckBox.setText("See Password");
        passwordCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordCheckBoxActionPerformed(evt);
            }
        });
        signUpUserPanel.add(passwordCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 330, -1, -1));

        confirmPasswordLabel.setFont(new java.awt.Font("Bahnschrift", 1, 24)); // NOI18N
        confirmPasswordLabel.setForeground(new java.awt.Color(255, 255, 255));
        confirmPasswordLabel.setText("Confirm Password:");
        signUpUserPanel.add(confirmPasswordLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 370, 220, -1));

        confirmPasswordField.setFont(new java.awt.Font("Bahnschrift", 1, 20)); // NOI18N
        confirmPasswordField.setPreferredSize(new java.awt.Dimension(64, 29));
        signUpUserPanel.add(confirmPasswordField, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 370, 420, 44));

        confirmPasswordCheckBox.setBackground(new java.awt.Color(111, 79, 55));
        confirmPasswordCheckBox.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        confirmPasswordCheckBox.setForeground(new java.awt.Color(255, 255, 255));
        confirmPasswordCheckBox.setText("See Password");
        confirmPasswordCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmPasswordCheckBoxActionPerformed(evt);
            }
        });
        signUpUserPanel.add(confirmPasswordCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 420, -1, -1));

        backLoginUserButton.setBackground(new java.awt.Color(111, 79, 55));
        backLoginUserButton.setFont(new java.awt.Font("Bahnschrift", 1, 24)); // NOI18N
        backLoginUserButton.setForeground(new java.awt.Color(255, 255, 255));
        backLoginUserButton.setText("Back");
        backLoginUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backLoginUserButtonActionPerformed(evt);
            }
        });
        signUpUserPanel.add(backLoginUserButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 540, 137, -1));

        alreadyAUserLabel.setFont(new java.awt.Font("Bahnschrift", 2, 24)); // NOI18N
        alreadyAUserLabel.setForeground(new java.awt.Color(255, 255, 255));
        alreadyAUserLabel.setText("Already a user?");
        signUpUserPanel.add(alreadyAUserLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 550, 189, -1));

        signupBtn.setFont(new java.awt.Font("Bahnschrift", 1, 36)); // NOI18N
        signupBtn.setForeground(new java.awt.Color(111, 79, 55));
        signupBtn.setText("Sign Up");
        signupBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signupBtnActionPerformed(evt);
            }
        });
        signUpUserPanel.add(signupBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 450, 490, -1));

        signUpUserIcon.setIcon(new javax.swing.ImageIcon("C:\\Users\\Administrator\\Documents\\NetBeansProjects\\BookBorrowingSystem\\src\\resources\\Images\\signUpImage.png")); // NOI18N
        signUpUserPanel.add(signUpUserIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 350, 270, 250));

        warningLabel.setFont(new java.awt.Font("Bahnschrift", 1, 12)); // NOI18N
        warningLabel.setForeground(new java.awt.Color(255, 153, 0));
        signUpUserPanel.add(warningLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(295, 444, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(signUpUserPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 812, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(signUpUserPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backLoginUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backLoginUserButtonActionPerformed
           if (!nameField.getText().isEmpty() || !eMailField.getText().isEmpty() ||
            !usernameField.getText().isEmpty() || !passwordField.getText().isEmpty() ||
            !confirmPasswordField.getText().isEmpty()) {

            int response = JOptionPane.showConfirmDialog(this,
                "You have unsaved changes. Are you sure you want to go back?",
                "Confirm",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);

            if (response == JOptionPane.YES_OPTION) {
                loginUser loginUser = new loginUser();
                loginUser.setVisible(true);
                this.dispose();
            }
        } else {
            loginUser loginUser = new loginUser();
            loginUser.setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_backLoginUserButtonActionPerformed

    private void signupBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signupBtnActionPerformed
    String name = nameField.getText();
    String email = eMailField.getText();
    String username = usernameField.getText();
    String password = new String(passwordField.getPassword());
    String confirmPassword = new String(confirmPasswordField.getPassword());

    // Validate if fields are empty
    if (name.isEmpty() || email.isEmpty() || username.isEmpty() || password.isEmpty() || confirmPassword.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please fill in all fields.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Validate password criteria
    if (password.length() < 8 || !password.matches(".*[A-Z].*") || !password.matches(".*[0-9].*") || !password.matches(".*[!@#$%^&*()].*")) {
        JOptionPane.showMessageDialog(this, "Password must be at least 8 characters long and include an uppercase letter, a number, and a special character.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Check if passwords match
    if (!password.equals(confirmPassword)) {
        JOptionPane.showMessageDialog(this, "Passwords do not match.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Save to database
    Connect(); // Ensure database connection
    try {
        // Insert data into the `user` table
        String userQuery = "INSERT INTO user (name, email, username, password) VALUES (?, ?, ?, ?)";
        PreparedStatement pst = con.prepareStatement(userQuery, Statement.RETURN_GENERATED_KEYS);
        pst.setString(1, name);
        pst.setString(2, email);
        pst.setString(3, username);
        pst.setString(4, password); // Storing plain text passwords is not secure; consider hashing.

        int rowCount = pst.executeUpdate();
        if (rowCount > 0) {
            // Get the generated userID
            ResultSet rs = pst.getGeneratedKeys();
            int userID = -1;
            if (rs.next()) {
                userID = rs.getInt(1);
            }

            // Insert data into the `profile` table
            String profileQuery = "INSERT INTO profile (userID, name, Bio) VALUES (?, ?, ?)";
            PreparedStatement profilePst = con.prepareStatement(profileQuery);
            profilePst.setInt(1, userID); // Use the generated userID
            profilePst.setString(2, name); // Use the name from the `user` table
            profilePst.setString(3, ""); // Initialize Bio as an empty string or default value

            int profileRowCount = profilePst.executeUpdate();
            if (profileRowCount > 0) {
                JOptionPane.showMessageDialog(this, "User registered successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);

                // Redirect to login
                loginUser loginUser = new loginUser();
                loginUser.setVisible(true);
                this.dispose();
            } else {
                JOptionPane.showMessageDialog(this, "Failed to create profile.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Failed to register user.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        Logger.getLogger(signupUser.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_signupBtnActionPerformed

    private void passwordCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordCheckBoxActionPerformed
         if (passwordCheckBox.isSelected()) {
            passwordField.setEchoChar((char) 0);
        } else {
            passwordField.setEchoChar('*');
        }
    }//GEN-LAST:event_passwordCheckBoxActionPerformed

    private void confirmPasswordCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmPasswordCheckBoxActionPerformed
        if (confirmPasswordCheckBox.isSelected()) {
            confirmPasswordField.setEchoChar((char) 0);
        } else {
            confirmPasswordField.setEchoChar('*');
        }
    }//GEN-LAST:event_confirmPasswordCheckBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("FlatlafLight".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(signupUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(signupUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(signupUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(signupUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new signupUser().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel alreadyAUserLabel;
    private javax.swing.JButton backLoginUserButton;
    private javax.swing.JCheckBox confirmPasswordCheckBox;
    private javax.swing.JPasswordField confirmPasswordField;
    private javax.swing.JLabel confirmPasswordLabel;
    private javax.swing.JTextField eMailField;
    private javax.swing.JLabel eMailLabel;
    private javax.swing.JLabel kindlyFillInLabel;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JCheckBox passwordCheckBox;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JLabel signUpUserIcon;
    private javax.swing.JPanel signUpUserPanel;
    private javax.swing.JButton signupBtn;
    private javax.swing.JTextField usernameField;
    private javax.swing.JLabel usernameLabel;
    private javax.swing.JLabel warningLabel;
    // End of variables declaration//GEN-END:variables
}
